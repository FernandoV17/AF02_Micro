
AFU2_Micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010c  0080010c  00000380  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000919  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074a  00000000  00000000  00000d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fb  00000000  00000000  000014b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000018b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000434  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <main>
  9e:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_display_mux>:
volatile uint8_t display_buffer[4] = {0};
volatile uint8_t current_digit = 0;

void init_display_mux(void) {
	// Configurar segmentos como salidas (PD1-PD7)
	display_7SEG_DDRX |= 0b11111110;  // PD1-PD7 como salidas (PD0 no usado)
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 6f       	ori	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	
	// Configurar dígitos del mux como salidas (PC1-PC4)
	display_mux_DDRX |= (1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4);
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	8e 61       	ori	r24, 0x1E	; 30
  b0:	87 b9       	out	0x07, r24	; 7
	
	// Apagar todos los dígitos inicialmente
	display_mux_PORTX &= ~((1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4));
  b2:	88 b1       	in	r24, 0x08	; 8
  b4:	81 7e       	andi	r24, 0xE1	; 225
  b6:	88 b9       	out	0x08, r24	; 8
  b8:	08 95       	ret

000000ba <update_display>:
}

void update_display(uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4) {
	display_buffer[0] = d1;
  ba:	ed e0       	ldi	r30, 0x0D	; 13
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	80 83       	st	Z, r24
	display_buffer[1] = d2;
  c0:	61 83       	std	Z+1, r22	; 0x01
	display_buffer[2] = d3;
  c2:	42 83       	std	Z+2, r20	; 0x02
	display_buffer[3] = d4;
  c4:	23 83       	std	Z+3, r18	; 0x03
  c6:	08 95       	ret

000000c8 <timer1_init>:
}

void timer1_init(void) {
	TCCR1A = 0;
  c8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11); // Modo CTC, prescaler 8
  cc:	8a e0       	ldi	r24, 0x0A	; 10
  ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 9999; // 16MHz/(8 * 10000) = 200Hz (5ms ciclo completo)
  d2:	8f e0       	ldi	r24, 0x0F	; 15
  d4:	97 e2       	ldi	r25, 0x27	; 39
  d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A);
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  e4:	08 95       	ret

000000e6 <actualizar_reloj_display>:
// Variables globales para el reloj regresivo
volatile uint8_t minutos = 59, segundos = 59;  // Inicia en 59:59
volatile uint8_t alarma_activada = 0;          // Bandera para alarma

void actualizar_reloj_display() {
	update_display(minutos / 10,   // Primer dígito minutos
  e6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ee:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <minutos>
  f2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <minutos>
  f6:	8d ec       	ldi	r24, 0xCD	; 205
  f8:	28 9f       	mul	r18, r24
  fa:	91 2d       	mov	r25, r1
  fc:	11 24       	eor	r1, r1
  fe:	96 95       	lsr	r25
 100:	96 95       	lsr	r25
 102:	96 95       	lsr	r25
 104:	99 0f       	add	r25, r25
 106:	59 2f       	mov	r21, r25
 108:	55 0f       	add	r21, r21
 10a:	55 0f       	add	r21, r21
 10c:	95 0f       	add	r25, r21
 10e:	29 1b       	sub	r18, r25
 110:	48 9f       	mul	r20, r24
 112:	41 2d       	mov	r20, r1
 114:	11 24       	eor	r1, r1
 116:	46 95       	lsr	r20
 118:	46 95       	lsr	r20
 11a:	46 95       	lsr	r20
 11c:	68 9f       	mul	r22, r24
 11e:	91 2d       	mov	r25, r1
 120:	11 24       	eor	r1, r1
 122:	96 95       	lsr	r25
 124:	96 95       	lsr	r25
 126:	96 95       	lsr	r25
 128:	99 0f       	add	r25, r25
 12a:	59 2f       	mov	r21, r25
 12c:	55 0f       	add	r21, r21
 12e:	55 0f       	add	r21, r21
 130:	95 0f       	add	r25, r21
 132:	69 1b       	sub	r22, r25
 134:	38 9f       	mul	r19, r24
 136:	81 2d       	mov	r24, r1
 138:	11 24       	eor	r1, r1
 13a:	86 95       	lsr	r24
 13c:	86 95       	lsr	r24
 13e:	86 95       	lsr	r24
 140:	0e 94 5d 00 	call	0xba	; 0xba <update_display>
 144:	08 95       	ret

00000146 <__vector_11>:
	minutos % 10,    // Segundo dígito minutos
	segundos / 10,  // Primer dígito segundos
	segundos % 10); // Segundo dígito segundos
}

ISR(TIMER1_COMPA_vect) {
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	// Multiplexado
	display_mux_PORTX &= ~((1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4));
 168:	88 b1       	in	r24, 0x08	; 8
 16a:	81 7e       	andi	r24, 0xE1	; 225
 16c:	88 b9       	out	0x08, r24	; 8
	display_7SEG_PORTX = (segment_map[display_buffer[current_digit]] << 1);
 16e:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	e3 5f       	subi	r30, 0xF3	; 243
 176:	fe 4f       	sbci	r31, 0xFE	; 254
 178:	e0 81       	ld	r30, Z
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ee 5f       	subi	r30, 0xFE	; 254
 17e:	fe 4f       	sbci	r31, 0xFE	; 254
 180:	80 81       	ld	r24, Z
 182:	88 0f       	add	r24, r24
 184:	8b b9       	out	0x0b, r24	; 11
	
	switch(current_digit) {
 186:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	51 f0       	breq	.+20     	; 0x1a2 <__vector_11+0x5c>
 18e:	28 f0       	brcs	.+10     	; 0x19a <__vector_11+0x54>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	59 f0       	breq	.+22     	; 0x1aa <__vector_11+0x64>
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	69 f0       	breq	.+26     	; 0x1b2 <__vector_11+0x6c>
 198:	0f c0       	rjmp	.+30     	; 0x1b8 <__vector_11+0x72>
		case 0: display_mux_PORTX |= (1 << DIG1); break;
 19a:	88 b1       	in	r24, 0x08	; 8
 19c:	80 61       	ori	r24, 0x10	; 16
 19e:	88 b9       	out	0x08, r24	; 8
 1a0:	0b c0       	rjmp	.+22     	; 0x1b8 <__vector_11+0x72>
		case 1: display_mux_PORTX |= (1 << DIG2); break;
 1a2:	88 b1       	in	r24, 0x08	; 8
 1a4:	88 60       	ori	r24, 0x08	; 8
 1a6:	88 b9       	out	0x08, r24	; 8
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <__vector_11+0x72>
		case 2: display_mux_PORTX |= (1 << DIG3); break;
 1aa:	88 b1       	in	r24, 0x08	; 8
 1ac:	84 60       	ori	r24, 0x04	; 4
 1ae:	88 b9       	out	0x08, r24	; 8
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <__vector_11+0x72>
		case 3: display_mux_PORTX |= (1 << DIG4); break;
 1b2:	88 b1       	in	r24, 0x08	; 8
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	88 b9       	out	0x08, r24	; 8
	}
	current_digit = (current_digit + 1) % 4;
 1b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	83 70       	andi	r24, 0x03	; 3
 1c2:	90 78       	andi	r25, 0x80	; 128
 1c4:	99 23       	and	r25, r25
 1c6:	24 f4       	brge	.+8      	; 0x1d0 <__vector_11+0x8a>
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	8c 6f       	ori	r24, 0xFC	; 252
 1cc:	9f 6f       	ori	r25, 0xFF	; 255
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	
	// Contador de tiempo REGRESIVO
	static uint16_t ms_count = 0;
	ms_count += 5;
 1d4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ms_count.1755>
 1d8:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <ms_count.1755+0x1>
 1dc:	05 96       	adiw	r24, 0x05	; 5
 1de:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <ms_count.1755+0x1>
 1e2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ms_count.1755>
	
	if(ms_count >= 1000) {
 1e6:	88 3e       	cpi	r24, 0xE8	; 232
 1e8:	93 40       	sbci	r25, 0x03	; 3
 1ea:	20 f1       	brcs	.+72     	; 0x234 <__vector_11+0xee>
		ms_count = 0;
 1ec:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <ms_count.1755+0x1>
 1f0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <ms_count.1755>
		
		if(!alarma_activada) {
 1f4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <alarma_activada>
 1f8:	81 11       	cpse	r24, r1
 1fa:	1c c0       	rjmp	.+56     	; 0x234 <__vector_11+0xee>
			if(segundos > 0) {
 1fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 200:	88 23       	and	r24, r24
 202:	31 f0       	breq	.+12     	; 0x210 <__vector_11+0xca>
				segundos--;  // Decrementa segundos
 204:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 208:	81 50       	subi	r24, 0x01	; 1
 20a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 20e:	10 c0       	rjmp	.+32     	; 0x230 <__vector_11+0xea>
				} else {
				if(minutos > 0) {
 210:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <minutos>
 214:	88 23       	and	r24, r24
 216:	49 f0       	breq	.+18     	; 0x22a <__vector_11+0xe4>
					minutos--;    // Decrementa minutos
 218:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <minutos>
 21c:	81 50       	subi	r24, 0x01	; 1
 21e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <minutos>
					segundos = 59; // Reinicia segundos
 222:	8b e3       	ldi	r24, 0x3B	; 59
 224:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 228:	03 c0       	rjmp	.+6      	; 0x230 <__vector_11+0xea>
					} else {
					// Al llegar a 00:00
					alarma_activada = 1;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <alarma_activada>
					// Opcional: Aquí puedes activar un buzzer o LED
				}
			}
			actualizar_reloj_display();
 230:	0e 94 73 00 	call	0xe6	; 0xe6 <actualizar_reloj_display>
		}
	}
	
	// Parpadeo cuando llega a 00:00
	if(alarma_activada && (ms_count % 400 < 200)) {
 234:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <alarma_activada>
 238:	88 23       	and	r24, r24
 23a:	09 f1       	breq	.+66     	; 0x27e <__vector_11+0x138>
 23c:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <ms_count.1755>
 240:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <ms_count.1755+0x1>
 244:	9a 01       	movw	r18, r20
 246:	32 95       	swap	r19
 248:	22 95       	swap	r18
 24a:	2f 70       	andi	r18, 0x0F	; 15
 24c:	23 27       	eor	r18, r19
 24e:	3f 70       	andi	r19, 0x0F	; 15
 250:	23 27       	eor	r18, r19
 252:	ae e3       	ldi	r26, 0x3E	; 62
 254:	ba e0       	ldi	r27, 0x0A	; 10
 256:	0e 94 5f 01 	call	0x2be	; 0x2be <__umulhisi3>
 25a:	20 e9       	ldi	r18, 0x90	; 144
 25c:	31 e0       	ldi	r19, 0x01	; 1
 25e:	bc 01       	movw	r22, r24
 260:	62 9f       	mul	r22, r18
 262:	c0 01       	movw	r24, r0
 264:	63 9f       	mul	r22, r19
 266:	90 0d       	add	r25, r0
 268:	72 9f       	mul	r23, r18
 26a:	90 0d       	add	r25, r0
 26c:	11 24       	eor	r1, r1
 26e:	48 1b       	sub	r20, r24
 270:	59 0b       	sbc	r21, r25
 272:	48 3c       	cpi	r20, 0xC8	; 200
 274:	51 05       	cpc	r21, r1
 276:	18 f4       	brcc	.+6      	; 0x27e <__vector_11+0x138>
		display_mux_PORTX &= ~((1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4));
 278:	88 b1       	in	r24, 0x08	; 8
 27a:	81 7e       	andi	r24, 0xE1	; 225
 27c:	88 b9       	out	0x08, r24	; 8
	}
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <main>:

int main(void) {
	// Inicialización
	init_display_mux();
 2a0:	0e 94 53 00 	call	0xa6	; 0xa6 <init_display_mux>
	timer1_init();
 2a4:	0e 94 64 00 	call	0xc8	; 0xc8 <timer1_init>
	
	// Valores iniciales (59:59)
	minutos = 59;
 2a8:	8b e3       	ldi	r24, 0x3B	; 59
 2aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <minutos>
	segundos = 59;
 2ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	alarma_activada = 0;
 2b2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <alarma_activada>
	actualizar_reloj_display();
 2b6:	0e 94 73 00 	call	0xe6	; 0xe6 <actualizar_reloj_display>
	
	// Habilitar interrupciones
	sei();
 2ba:	78 94       	sei
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <main+0x1c>

000002be <__umulhisi3>:
 2be:	a2 9f       	mul	r26, r18
 2c0:	b0 01       	movw	r22, r0
 2c2:	b3 9f       	mul	r27, r19
 2c4:	c0 01       	movw	r24, r0
 2c6:	a3 9f       	mul	r26, r19
 2c8:	70 0d       	add	r23, r0
 2ca:	81 1d       	adc	r24, r1
 2cc:	11 24       	eor	r1, r1
 2ce:	91 1d       	adc	r25, r1
 2d0:	b2 9f       	mul	r27, r18
 2d2:	70 0d       	add	r23, r0
 2d4:	81 1d       	adc	r24, r1
 2d6:	11 24       	eor	r1, r1
 2d8:	91 1d       	adc	r25, r1
 2da:	08 95       	ret

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
