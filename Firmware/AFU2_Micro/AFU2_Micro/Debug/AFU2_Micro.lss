
AFU2_Micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000003fa  0000048e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010a  0080010a  00000498  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b5e  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000887  00000000  00000000  00001106  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065b  00000000  00000000  0000198d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e3  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ab  00000000  00000000  000025d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002682  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  9e:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <buttons_init>:
// Tiempo de debounce en ms
#define DEBOUNCE_TIME 50

void buttons_init(void) {
	// Configurar pines como entrada
	DDRD &= ~(BUTTON1_MASK | BUTTON2_MASK | BUTTON3_MASK);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	83 7e       	andi	r24, 0xE3	; 227
  aa:	8a b9       	out	0x0a, r24	; 10
	// Desactivar resistencias de pull-up
	PORTD &= ~(BUTTON1_MASK | BUTTON2_MASK | BUTTON3_MASK);
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	83 7e       	andi	r24, 0xE3	; 227
  b0:	8b b9       	out	0x0b, r24	; 11
	
	// Leer estado inicial
	actual_state = BUTTONS_READ;
  b2:	89 b1       	in	r24, 0x09	; 9
  b4:	8c 71       	andi	r24, 0x1C	; 28
  b6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <actual_state>
	last_state = actual_state;
	debounced_state = actual_state;
  ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
  be:	08 95       	ret

000000c0 <buttons_update>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	80 e7       	ldi	r24, 0x70	; 112
  c4:	92 e0       	ldi	r25, 0x02	; 2
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <buttons_update+0x6>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <buttons_update+0x10>
  d0:	00 00       	nop

void buttons_update(void) {
	// Aplicar debounce
	_delay_ms(DEBOUNCE_TIME);
	
	last_state = actual_state;
  d2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <actual_state>
	actual_state = BUTTONS_READ;
  d6:	89 b1       	in	r24, 0x09	; 9
  d8:	8c 71       	andi	r24, 0x1C	; 28
  da:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <actual_state>
	
	if ((actual_state & BUTTON1_MASK) == (last_state & BUTTON1_MASK)) {
  de:	98 27       	eor	r25, r24
  e0:	92 fd       	sbrc	r25, 2
  e2:	08 c0       	rjmp	.+16     	; 0xf4 <buttons_update+0x34>
		debounced_state = (debounced_state & ~BUTTON1_MASK) | (actual_state & BUTTON1_MASK);
  e4:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
  e8:	2b 7f       	andi	r18, 0xFB	; 251
  ea:	38 2f       	mov	r19, r24
  ec:	34 70       	andi	r19, 0x04	; 4
  ee:	23 2b       	or	r18, r19
  f0:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <__data_end>
	}
	
	if ((actual_state & BUTTON2_MASK) == (last_state & BUTTON2_MASK)) {
  f4:	93 fd       	sbrc	r25, 3
  f6:	08 c0       	rjmp	.+16     	; 0x108 <buttons_update+0x48>
		debounced_state = (debounced_state & ~BUTTON2_MASK) | (actual_state & BUTTON2_MASK);
  f8:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
  fc:	27 7f       	andi	r18, 0xF7	; 247
  fe:	38 2f       	mov	r19, r24
 100:	38 70       	andi	r19, 0x08	; 8
 102:	23 2b       	or	r18, r19
 104:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <__data_end>
	}
	
	if ((actual_state & BUTTON3_MASK) == (last_state & BUTTON3_MASK)) {
 108:	94 fd       	sbrc	r25, 4
 10a:	07 c0       	rjmp	.+14     	; 0x11a <buttons_update+0x5a>
		debounced_state = (debounced_state & ~BUTTON3_MASK) | (actual_state & BUTTON3_MASK);
 10c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
 110:	9f 7e       	andi	r25, 0xEF	; 239
 112:	80 71       	andi	r24, 0x10	; 16
 114:	89 2b       	or	r24, r25
 116:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 11a:	08 95       	ret

0000011c <button1_pressed>:
	}
}

uint8_t button1_pressed(void) {
	return !(debounced_state & BUTTON1_MASK);
 11c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 120:	86 95       	lsr	r24
 122:	86 95       	lsr	r24
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	89 27       	eor	r24, r25
}
 128:	81 70       	andi	r24, 0x01	; 1
 12a:	08 95       	ret

0000012c <button2_pressed>:

uint8_t button2_pressed(void) {
	return !(debounced_state & BUTTON2_MASK);
 12c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 130:	86 95       	lsr	r24
 132:	86 95       	lsr	r24
 134:	86 95       	lsr	r24
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	89 27       	eor	r24, r25
}
 13a:	81 70       	andi	r24, 0x01	; 1
 13c:	08 95       	ret

0000013e <button3_pressed>:

uint8_t button3_pressed(void) {
	return !(debounced_state & BUTTON3_MASK);
 13e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 142:	82 95       	swap	r24
 144:	8f 70       	andi	r24, 0x0F	; 15
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	89 27       	eor	r24, r25
 14a:	81 70       	andi	r24, 0x01	; 1
 14c:	08 95       	ret

0000014e <init_display_mux>:
volatile uint8_t display_buffer[4] = {0};
volatile uint8_t current_digit = 0;

void init_display_mux(void) {
	// Configurar segmentos como salidas (PB0-PB7)
	display_7SEG_DDRX = 0xFF;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	84 b9       	out	0x04, r24	; 4
	
	// Configurar dígitos del mux como salidas (PC1-PC4)
	display_mux_DDRX |= (1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4);
 152:	87 b1       	in	r24, 0x07	; 7
 154:	8e 61       	ori	r24, 0x1E	; 30
 156:	87 b9       	out	0x07, r24	; 7
	
	// Apagar todos los dígitos inicialmente (LOW para desactivar mux)
	display_mux_PORTX &= ~((1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4));
 158:	88 b1       	in	r24, 0x08	; 8
 15a:	81 7e       	andi	r24, 0xE1	; 225
 15c:	88 b9       	out	0x08, r24	; 8
 15e:	08 95       	ret

00000160 <update_display>:
}

void update_display(uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4) {
	display_buffer[0] = d1;
 160:	ed e0       	ldi	r30, 0x0D	; 13
 162:	f1 e0       	ldi	r31, 0x01	; 1
 164:	80 83       	st	Z, r24
	display_buffer[1] = d2;
 166:	61 83       	std	Z+1, r22	; 0x01
	display_buffer[2] = d3;
 168:	42 83       	std	Z+2, r20	; 0x02
	display_buffer[3] = d4;
 16a:	23 83       	std	Z+3, r18	; 0x03
 16c:	08 95       	ret

0000016e <__vector_11>:
}

ISR(TIMER1_COMPA_vect) {
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	// 1. Apagar todos los dígitos (poner en LOW los pines del mux)
	display_mux_PORTX &= ~((1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4));
 180:	88 b1       	in	r24, 0x08	; 8
 182:	81 7e       	andi	r24, 0xE1	; 225
 184:	88 b9       	out	0x08, r24	; 8
	
	// 2. Preparar segmentos para el dígito actual
	display_7SEG_PORTX = segment_map[display_buffer[current_digit]];
 186:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <current_digit>
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	e3 5f       	subi	r30, 0xF3	; 243
 18e:	fe 4f       	sbci	r31, 0xFE	; 254
 190:	e0 81       	ld	r30, Z
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	e0 50       	subi	r30, 0x00	; 0
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	80 81       	ld	r24, Z
 19a:	85 b9       	out	0x05, r24	; 5
	
	// 3. Activar solo el dígito actual (HIGH en el pin del mux correspondiente)
	switch(current_digit) {
 19c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current_digit>
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	51 f0       	breq	.+20     	; 0x1b8 <__vector_11+0x4a>
 1a4:	28 f0       	brcs	.+10     	; 0x1b0 <__vector_11+0x42>
 1a6:	82 30       	cpi	r24, 0x02	; 2
 1a8:	59 f0       	breq	.+22     	; 0x1c0 <__vector_11+0x52>
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	69 f0       	breq	.+26     	; 0x1c8 <__vector_11+0x5a>
 1ae:	0f c0       	rjmp	.+30     	; 0x1ce <__vector_11+0x60>
		case 0: display_mux_PORTX |= (1 << DIG1); break;
 1b0:	88 b1       	in	r24, 0x08	; 8
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	88 b9       	out	0x08, r24	; 8
 1b6:	0b c0       	rjmp	.+22     	; 0x1ce <__vector_11+0x60>
		case 1: display_mux_PORTX |= (1 << DIG2); break;
 1b8:	88 b1       	in	r24, 0x08	; 8
 1ba:	88 60       	ori	r24, 0x08	; 8
 1bc:	88 b9       	out	0x08, r24	; 8
 1be:	07 c0       	rjmp	.+14     	; 0x1ce <__vector_11+0x60>
		case 2: display_mux_PORTX |= (1 << DIG3); break;
 1c0:	88 b1       	in	r24, 0x08	; 8
 1c2:	84 60       	ori	r24, 0x04	; 4
 1c4:	88 b9       	out	0x08, r24	; 8
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <__vector_11+0x60>
		case 3: display_mux_PORTX |= (1 << DIG4); break;
 1c8:	88 b1       	in	r24, 0x08	; 8
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	88 b9       	out	0x08, r24	; 8
	}
	
	// 4. Rotar al siguiente dígito
	current_digit = (current_digit + 1) % 4;
 1ce:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current_digit>
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	83 70       	andi	r24, 0x03	; 3
 1d8:	90 78       	andi	r25, 0x80	; 128
 1da:	99 23       	and	r25, r25
 1dc:	24 f4       	brge	.+8      	; 0x1e6 <__vector_11+0x78>
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	8c 6f       	ori	r24, 0xFC	; 252
 1e2:	9f 6f       	ori	r25, 0xFF	; 255
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current_digit>
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <timer1_init>:

void timer1_init(void) {
	TCCR1A = 0;
 1fc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11); // Modo CTC, prescaler 8
 200:	8a e0       	ldi	r24, 0x0A	; 10
 202:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 9999; // 16MHz/(8 * 10000) = 200Hz (5ms ciclo completo)
 206:	8f e0       	ldi	r24, 0x0F	; 15
 208:	97 e2       	ldi	r25, 0x27	; 39
 20a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 20e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A);
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 218:	08 95       	ret

0000021a <update_display_values>:
// Variables globales
volatile uint16_t counter = 0;  // Cambiado de uint8_t a uint16_t para soportar hasta 9999
volatile uint8_t display_values[4] = {0, 0, 0, 0};

void update_display_values(void) {
	display_values[0] = counter / 1000;        // Millares
 21a:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <counter>
 21e:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <counter+0x1>
 222:	36 95       	lsr	r19
 224:	27 95       	ror	r18
 226:	36 95       	lsr	r19
 228:	27 95       	ror	r18
 22a:	36 95       	lsr	r19
 22c:	27 95       	ror	r18
 22e:	a5 ec       	ldi	r26, 0xC5	; 197
 230:	b0 e2       	ldi	r27, 0x20	; 32
 232:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__umulhisi3>
 236:	92 95       	swap	r25
 238:	82 95       	swap	r24
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	89 27       	eor	r24, r25
 23e:	9f 70       	andi	r25, 0x0F	; 15
 240:	89 27       	eor	r24, r25
 242:	e1 e1       	ldi	r30, 0x11	; 17
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	80 83       	st	Z, r24
	display_values[1] = (counter / 100) % 10;  // Centenas
 248:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <counter>
 24c:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <counter+0x1>
 250:	36 95       	lsr	r19
 252:	27 95       	ror	r18
 254:	36 95       	lsr	r19
 256:	27 95       	ror	r18
 258:	ab e7       	ldi	r26, 0x7B	; 123
 25a:	b4 e1       	ldi	r27, 0x14	; 20
 25c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__umulhisi3>
 260:	ac 01       	movw	r20, r24
 262:	56 95       	lsr	r21
 264:	47 95       	ror	r20
 266:	9a 01       	movw	r18, r20
 268:	ad ec       	ldi	r26, 0xCD	; 205
 26a:	bc ec       	ldi	r27, 0xCC	; 204
 26c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__umulhisi3>
 270:	96 95       	lsr	r25
 272:	87 95       	ror	r24
 274:	96 95       	lsr	r25
 276:	87 95       	ror	r24
 278:	96 95       	lsr	r25
 27a:	87 95       	ror	r24
 27c:	9c 01       	movw	r18, r24
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	82 0f       	add	r24, r18
 290:	93 1f       	adc	r25, r19
 292:	9a 01       	movw	r18, r20
 294:	28 1b       	sub	r18, r24
 296:	39 0b       	sbc	r19, r25
 298:	21 83       	std	Z+1, r18	; 0x01
	display_values[2] = (counter / 10) % 10;   // Decenas
 29a:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <counter>
 29e:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <counter+0x1>
 2a2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__umulhisi3>
 2a6:	ac 01       	movw	r20, r24
 2a8:	56 95       	lsr	r21
 2aa:	47 95       	ror	r20
 2ac:	56 95       	lsr	r21
 2ae:	47 95       	ror	r20
 2b0:	56 95       	lsr	r21
 2b2:	47 95       	ror	r20
 2b4:	9a 01       	movw	r18, r20
 2b6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__umulhisi3>
 2ba:	96 95       	lsr	r25
 2bc:	87 95       	ror	r24
 2be:	96 95       	lsr	r25
 2c0:	87 95       	ror	r24
 2c2:	96 95       	lsr	r25
 2c4:	87 95       	ror	r24
 2c6:	9c 01       	movw	r18, r24
 2c8:	22 0f       	add	r18, r18
 2ca:	33 1f       	adc	r19, r19
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	82 0f       	add	r24, r18
 2da:	93 1f       	adc	r25, r19
 2dc:	9a 01       	movw	r18, r20
 2de:	28 1b       	sub	r18, r24
 2e0:	39 0b       	sbc	r19, r25
 2e2:	22 83       	std	Z+2, r18	; 0x02
	display_values[3] = counter % 10;          // Unidades
 2e4:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <counter>
 2e8:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <counter+0x1>
 2ec:	9a 01       	movw	r18, r20
 2ee:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__umulhisi3>
 2f2:	96 95       	lsr	r25
 2f4:	87 95       	ror	r24
 2f6:	96 95       	lsr	r25
 2f8:	87 95       	ror	r24
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	9c 01       	movw	r18, r24
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	82 0f       	add	r24, r18
 312:	93 1f       	adc	r25, r19
 314:	9a 01       	movw	r18, r20
 316:	28 1b       	sub	r18, r24
 318:	39 0b       	sbc	r19, r25
 31a:	23 83       	std	Z+3, r18	; 0x03
 31c:	08 95       	ret

0000031e <main>:
}

int main(void) {
	// Inicializar display, timer y botones
	init_display_mux();
 31e:	0e 94 a7 00 	call	0x14e	; 0x14e <init_display_mux>
	timer1_init();
 322:	0e 94 fe 00 	call	0x1fc	; 0x1fc <timer1_init>
	buttons_init();
 326:	0e 94 53 00 	call	0xa6	; 0xa6 <buttons_init>
	
	// Valores iniciales - ahora con el tipo correcto
	counter = 1234;
 32a:	82 ed       	ldi	r24, 0xD2	; 210
 32c:	94 e0       	ldi	r25, 0x04	; 4
 32e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <counter+0x1>
 332:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <counter>
	update_display_values();
 336:	0e 94 0d 01 	call	0x21a	; 0x21a <update_display_values>
	update_display(display_values[0], display_values[1],
 33a:	e1 e1       	ldi	r30, 0x11	; 17
 33c:	f1 e0       	ldi	r31, 0x01	; 1
 33e:	23 81       	ldd	r18, Z+3	; 0x03
 340:	42 81       	ldd	r20, Z+2	; 0x02
 342:	61 81       	ldd	r22, Z+1	; 0x01
 344:	80 81       	ld	r24, Z
 346:	0e 94 b0 00 	call	0x160	; 0x160 <update_display>
	display_values[2], display_values[3]);
	
	// Habilitar interrupciones globales
	sei();
 34a:	78 94       	sei
	
	while(1) {
		// Actualizar estados de los botones
		buttons_update();
 34c:	0e 94 60 00 	call	0xc0	; 0xc0 <buttons_update>
		
		// Botón 1 (PD2) - Incrementar
		if(button1_pressed()) {
 350:	0e 94 8e 00 	call	0x11c	; 0x11c <button1_pressed>
 354:	88 23       	and	r24, r24
 356:	91 f0       	breq	.+36     	; 0x37c <main+0x5e>
			if(counter < 9999) counter++;
 358:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <counter>
 35c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <counter+0x1>
 360:	8f 30       	cpi	r24, 0x0F	; 15
 362:	97 42       	sbci	r25, 0x27	; 39
 364:	48 f4       	brcc	.+18     	; 0x378 <main+0x5a>
 366:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <counter>
 36a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <counter+0x1>
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <counter+0x1>
 374:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <counter>
			update_display_values();
 378:	0e 94 0d 01 	call	0x21a	; 0x21a <update_display_values>
		}
		
		// Botón 2 (PD3) - Decrementar
		if(button2_pressed()) {
 37c:	0e 94 96 00 	call	0x12c	; 0x12c <button2_pressed>
 380:	88 23       	and	r24, r24
 382:	89 f0       	breq	.+34     	; 0x3a6 <main+0x88>
			if(counter > 0) counter--;
 384:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <counter>
 388:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <counter+0x1>
 38c:	89 2b       	or	r24, r25
 38e:	49 f0       	breq	.+18     	; 0x3a2 <main+0x84>
 390:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <counter>
 394:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <counter+0x1>
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <counter+0x1>
 39e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <counter>
			update_display_values();
 3a2:	0e 94 0d 01 	call	0x21a	; 0x21a <update_display_values>
		}
		
		// Botón 3 (PD4) - Reset
		if(button3_pressed()) {
 3a6:	0e 94 9f 00 	call	0x13e	; 0x13e <button3_pressed>
 3aa:	88 23       	and	r24, r24
 3ac:	31 f0       	breq	.+12     	; 0x3ba <main+0x9c>
			counter = 0;
 3ae:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <counter+0x1>
 3b2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <counter>
			update_display_values();
 3b6:	0e 94 0d 01 	call	0x21a	; 0x21a <update_display_values>
		}
		
		// Actualizar display con los nuevos valores
		update_display(display_values[0], display_values[1],
 3ba:	e1 e1       	ldi	r30, 0x11	; 17
 3bc:	f1 e0       	ldi	r31, 0x01	; 1
 3be:	23 81       	ldd	r18, Z+3	; 0x03
 3c0:	42 81       	ldd	r20, Z+2	; 0x02
 3c2:	61 81       	ldd	r22, Z+1	; 0x01
 3c4:	80 81       	ld	r24, Z
 3c6:	0e 94 b0 00 	call	0x160	; 0x160 <update_display>
 3ca:	8f e3       	ldi	r24, 0x3F	; 63
 3cc:	9c e9       	ldi	r25, 0x9C	; 156
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0xb0>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0xb6>
 3d4:	00 00       	nop
 3d6:	ba cf       	rjmp	.-140    	; 0x34c <main+0x2e>

000003d8 <__umulhisi3>:
 3d8:	a2 9f       	mul	r26, r18
 3da:	b0 01       	movw	r22, r0
 3dc:	b3 9f       	mul	r27, r19
 3de:	c0 01       	movw	r24, r0
 3e0:	a3 9f       	mul	r26, r19
 3e2:	70 0d       	add	r23, r0
 3e4:	81 1d       	adc	r24, r1
 3e6:	11 24       	eor	r1, r1
 3e8:	91 1d       	adc	r25, r1
 3ea:	b2 9f       	mul	r27, r18
 3ec:	70 0d       	add	r23, r0
 3ee:	81 1d       	adc	r24, r1
 3f0:	11 24       	eor	r1, r1
 3f2:	91 1d       	adc	r25, r1
 3f4:	08 95       	ret

000003f6 <_exit>:
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
