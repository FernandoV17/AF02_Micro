
AFU2_Micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000274  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010a  0080010a  00000312  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091f  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073b  00000000  00000000  00000d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e3  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001824  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042c  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001deb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 30 01 	call	0x260	; 0x260 <main>
  9e:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_display_mux>:
volatile uint8_t display_buffer[4] = {0};
volatile uint8_t current_digit = 0;

void init_display_mux(void) {
	// Configurar segmentos como salidas (PB0-PB7)
	display_7SEG_DDRX = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
	
	// Configurar dígitos del mux como salidas (PC1-PC4)
	display_mux_DDRX |= (1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4);
  aa:	87 b1       	in	r24, 0x07	; 7
  ac:	8e 61       	ori	r24, 0x1E	; 30
  ae:	87 b9       	out	0x07, r24	; 7
	
	// Apagar todos los dígitos inicialmente (LOW para desactivar mux)
	display_mux_PORTX &= ~((1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4));
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	81 7e       	andi	r24, 0xE1	; 225
  b4:	88 b9       	out	0x08, r24	; 8
  b6:	08 95       	ret

000000b8 <update_display>:
}

void update_display(uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4) {
	display_buffer[0] = d1;
  b8:	eb e0       	ldi	r30, 0x0B	; 11
  ba:	f1 e0       	ldi	r31, 0x01	; 1
  bc:	80 83       	st	Z, r24
	display_buffer[1] = d2;
  be:	61 83       	std	Z+1, r22	; 0x01
	display_buffer[2] = d3;
  c0:	42 83       	std	Z+2, r20	; 0x02
	display_buffer[3] = d4;
  c2:	23 83       	std	Z+3, r18	; 0x03
  c4:	08 95       	ret

000000c6 <timer1_init>:
}

void timer1_init(void) {
	TCCR1A = 0;
  c6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11); // Modo CTC, prescaler 8
  ca:	8a e0       	ldi	r24, 0x0A	; 10
  cc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 9999; // 16MHz/(8 * 10000) = 200Hz (5ms ciclo completo)
  d0:	8f e0       	ldi	r24, 0x0F	; 15
  d2:	97 e2       	ldi	r25, 0x27	; 39
  d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A);
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  e2:	08 95       	ret

000000e4 <actualizar_reloj_display>:
// Variables globales
volatile uint8_t horas = 0, minutos = 0, segundos = 0;
volatile uint16_t ms_counter = 0; // Contador de milisegundos

void actualizar_reloj_display() {
	update_display(horas / 10, horas % 10, minutos / 10, minutos % 10);
  e4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <minutos>
  e8:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <minutos>
  ec:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <horas>
  f0:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <horas>
  f4:	8d ec       	ldi	r24, 0xCD	; 205
  f6:	28 9f       	mul	r18, r24
  f8:	91 2d       	mov	r25, r1
  fa:	11 24       	eor	r1, r1
  fc:	96 95       	lsr	r25
  fe:	96 95       	lsr	r25
 100:	96 95       	lsr	r25
 102:	99 0f       	add	r25, r25
 104:	59 2f       	mov	r21, r25
 106:	55 0f       	add	r21, r21
 108:	55 0f       	add	r21, r21
 10a:	95 0f       	add	r25, r21
 10c:	29 1b       	sub	r18, r25
 10e:	48 9f       	mul	r20, r24
 110:	41 2d       	mov	r20, r1
 112:	11 24       	eor	r1, r1
 114:	46 95       	lsr	r20
 116:	46 95       	lsr	r20
 118:	46 95       	lsr	r20
 11a:	68 9f       	mul	r22, r24
 11c:	91 2d       	mov	r25, r1
 11e:	11 24       	eor	r1, r1
 120:	96 95       	lsr	r25
 122:	96 95       	lsr	r25
 124:	96 95       	lsr	r25
 126:	99 0f       	add	r25, r25
 128:	59 2f       	mov	r21, r25
 12a:	55 0f       	add	r21, r21
 12c:	55 0f       	add	r21, r21
 12e:	95 0f       	add	r25, r21
 130:	69 1b       	sub	r22, r25
 132:	38 9f       	mul	r19, r24
 134:	81 2d       	mov	r24, r1
 136:	11 24       	eor	r1, r1
 138:	86 95       	lsr	r24
 13a:	86 95       	lsr	r24
 13c:	86 95       	lsr	r24
 13e:	0e 94 5c 00 	call	0xb8	; 0xb8 <update_display>
 142:	08 95       	ret

00000144 <__vector_11>:
}

ISR(TIMER1_COMPA_vect) {
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	// --- Multiplexado del display (cada 5ms) ---
	display_mux_PORTX &= ~((1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4)); // Apagar dÃ­gitos
 166:	88 b1       	in	r24, 0x08	; 8
 168:	81 7e       	andi	r24, 0xE1	; 225
 16a:	88 b9       	out	0x08, r24	; 8
	display_7SEG_PORTX = segment_map[display_buffer[current_digit]]; // Mostrar dÃ­gito actual
 16c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e5 5f       	subi	r30, 0xF5	; 245
 174:	fe 4f       	sbci	r31, 0xFE	; 254
 176:	e0 81       	ld	r30, Z
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	e0 50       	subi	r30, 0x00	; 0
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	80 81       	ld	r24, Z
 180:	85 b9       	out	0x05, r24	; 5
	switch(current_digit) {
 182:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	51 f0       	breq	.+20     	; 0x19e <__vector_11+0x5a>
 18a:	28 f0       	brcs	.+10     	; 0x196 <__vector_11+0x52>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	59 f0       	breq	.+22     	; 0x1a6 <__vector_11+0x62>
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	69 f0       	breq	.+26     	; 0x1ae <__vector_11+0x6a>
 194:	0f c0       	rjmp	.+30     	; 0x1b4 <__vector_11+0x70>
		case 0: display_mux_PORTX |= (1 << DIG1); break;
 196:	88 b1       	in	r24, 0x08	; 8
 198:	80 61       	ori	r24, 0x10	; 16
 19a:	88 b9       	out	0x08, r24	; 8
 19c:	0b c0       	rjmp	.+22     	; 0x1b4 <__vector_11+0x70>
		case 1: display_mux_PORTX |= (1 << DIG2); break;
 19e:	88 b1       	in	r24, 0x08	; 8
 1a0:	88 60       	ori	r24, 0x08	; 8
 1a2:	88 b9       	out	0x08, r24	; 8
 1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <__vector_11+0x70>
		case 2: display_mux_PORTX |= (1 << DIG3); break;
 1a6:	88 b1       	in	r24, 0x08	; 8
 1a8:	84 60       	ori	r24, 0x04	; 4
 1aa:	88 b9       	out	0x08, r24	; 8
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <__vector_11+0x70>
		case 3: display_mux_PORTX |= (1 << DIG4); break;
 1ae:	88 b1       	in	r24, 0x08	; 8
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	88 b9       	out	0x08, r24	; 8
	}
	current_digit = (current_digit + 1) % 4; // Rotar dÃ­gito
 1b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	83 70       	andi	r24, 0x03	; 3
 1be:	90 78       	andi	r25, 0x80	; 128
 1c0:	99 23       	and	r25, r25
 1c2:	24 f4       	brge	.+8      	; 0x1cc <__vector_11+0x88>
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	8c 6f       	ori	r24, 0xFC	; 252
 1c8:	9f 6f       	ori	r25, 0xFF	; 255
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>

	// --- Contador de segundos (cada 1000ms) ---
	ms_counter += 5; // Cada interrupciÃ³n suma 5ms
 1d0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <ms_counter>
 1d4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <ms_counter+0x1>
 1d8:	05 96       	adiw	r24, 0x05	; 5
 1da:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <ms_counter+0x1>
 1de:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ms_counter>
	if (ms_counter >= 1000) {
 1e2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <ms_counter>
 1e6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <ms_counter+0x1>
 1ea:	88 3e       	cpi	r24, 0xE8	; 232
 1ec:	93 40       	sbci	r25, 0x03	; 3
 1ee:	38 f1       	brcs	.+78     	; 0x23e <__vector_11+0xfa>
		ms_counter = 0;
 1f0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <ms_counter+0x1>
 1f4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <ms_counter>
		segundos++;
 1f8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <segundos>
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <segundos>
		if (segundos >= 60) {
 202:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <segundos>
 206:	8c 33       	cpi	r24, 0x3C	; 60
 208:	c0 f0       	brcs	.+48     	; 0x23a <__vector_11+0xf6>
			segundos = 0;
 20a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <segundos>
			minutos++;
 20e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <minutos>
 212:	8f 5f       	subi	r24, 0xFF	; 255
 214:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <minutos>
			if (minutos >= 60) {
 218:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <minutos>
 21c:	8c 33       	cpi	r24, 0x3C	; 60
 21e:	68 f0       	brcs	.+26     	; 0x23a <__vector_11+0xf6>
				minutos = 0;
 220:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <minutos>
				horas++;
 224:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <horas>
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <horas>
				if (horas >= 24) horas = 0;
 22e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <horas>
 232:	88 31       	cpi	r24, 0x18	; 24
 234:	10 f0       	brcs	.+4      	; 0x23a <__vector_11+0xf6>
 236:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <horas>
			}
		}
		actualizar_reloj_display(); // Actualizar display cada segundo
 23a:	0e 94 72 00 	call	0xe4	; 0xe4 <actualizar_reloj_display>
	}
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <main>:

int main(void) {
	init_display_mux();
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <init_display_mux>
	timer1_init();
 264:	0e 94 63 00 	call	0xc6	; 0xc6 <timer1_init>
	actualizar_reloj_display(); // Mostrar 00:00 inicial
 268:	0e 94 72 00 	call	0xe4	; 0xe4 <actualizar_reloj_display>
	sei(); // Habilitar interrupciones
 26c:	78 94       	sei
 26e:	ff cf       	rjmp	.-2      	; 0x26e <main+0xe>

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
