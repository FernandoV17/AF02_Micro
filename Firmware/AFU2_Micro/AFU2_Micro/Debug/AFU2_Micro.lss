
AFU2_Micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001d2  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010a  0080010a  00000270  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000092f  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000775  00000000  00000000  00000c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000408  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  000017e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ca  00000000  00000000  00001cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  9e:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_display_mux>:
volatile uint8_t display_buffer[4] = {0};
volatile uint8_t current_digit = 0;

void init_display_mux(void) {
	// Configurar segmentos como salidas (PB0-PB7)
	display_7SEG_DDRX = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
	
	// Configurar dígitos del mux como salidas (PC1-PC4)
	display_mux_DDRX |= (1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4);
  aa:	87 b1       	in	r24, 0x07	; 7
  ac:	8e 61       	ori	r24, 0x1E	; 30
  ae:	87 b9       	out	0x07, r24	; 7
	
	// Apagar todos los dígitos inicialmente (LOW para desactivar mux)
	display_mux_PORTX &= ~((1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4));
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	81 7e       	andi	r24, 0xE1	; 225
  b4:	88 b9       	out	0x08, r24	; 8
  b6:	08 95       	ret

000000b8 <update_display>:
}

void update_display(uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4) {
	display_buffer[0] = d1;
  b8:	eb e0       	ldi	r30, 0x0B	; 11
  ba:	f1 e0       	ldi	r31, 0x01	; 1
  bc:	80 83       	st	Z, r24
	display_buffer[1] = d2;
  be:	61 83       	std	Z+1, r22	; 0x01
	display_buffer[2] = d3;
  c0:	42 83       	std	Z+2, r20	; 0x02
	display_buffer[3] = d4;
  c2:	23 83       	std	Z+3, r18	; 0x03
  c4:	08 95       	ret

000000c6 <__vector_11>:
}

ISR(TIMER1_COMPA_vect) {
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	ef 93       	push	r30
  d6:	ff 93       	push	r31
	// 1. Apagar todos los dígitos (poner en LOW los pines del mux)
	display_mux_PORTX &= ~((1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4));
  d8:	88 b1       	in	r24, 0x08	; 8
  da:	81 7e       	andi	r24, 0xE1	; 225
  dc:	88 b9       	out	0x08, r24	; 8
	
	// 2. Preparar segmentos para el dígito actual
	display_7SEG_PORTX = segment_map[display_buffer[current_digit]];
  de:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	e5 5f       	subi	r30, 0xF5	; 245
  e6:	fe 4f       	sbci	r31, 0xFE	; 254
  e8:	e0 81       	ld	r30, Z
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	e0 50       	subi	r30, 0x00	; 0
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	80 81       	ld	r24, Z
  f2:	85 b9       	out	0x05, r24	; 5
	
	// 3. Activar solo el dígito actual (HIGH en el pin del mux correspondiente)
	switch(current_digit) {
  f4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	51 f0       	breq	.+20     	; 0x110 <__vector_11+0x4a>
  fc:	28 f0       	brcs	.+10     	; 0x108 <__vector_11+0x42>
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	59 f0       	breq	.+22     	; 0x118 <__vector_11+0x52>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	69 f0       	breq	.+26     	; 0x120 <__vector_11+0x5a>
 106:	0f c0       	rjmp	.+30     	; 0x126 <__vector_11+0x60>
		case 0: display_mux_PORTX |= (1 << DIG1); break;
 108:	88 b1       	in	r24, 0x08	; 8
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	88 b9       	out	0x08, r24	; 8
 10e:	0b c0       	rjmp	.+22     	; 0x126 <__vector_11+0x60>
		case 1: display_mux_PORTX |= (1 << DIG2); break;
 110:	88 b1       	in	r24, 0x08	; 8
 112:	84 60       	ori	r24, 0x04	; 4
 114:	88 b9       	out	0x08, r24	; 8
 116:	07 c0       	rjmp	.+14     	; 0x126 <__vector_11+0x60>
		case 2: display_mux_PORTX |= (1 << DIG3); break;
 118:	88 b1       	in	r24, 0x08	; 8
 11a:	88 60       	ori	r24, 0x08	; 8
 11c:	88 b9       	out	0x08, r24	; 8
 11e:	03 c0       	rjmp	.+6      	; 0x126 <__vector_11+0x60>
		case 3: display_mux_PORTX |= (1 << DIG4); break;
 120:	88 b1       	in	r24, 0x08	; 8
 122:	80 61       	ori	r24, 0x10	; 16
 124:	88 b9       	out	0x08, r24	; 8
	}
	
	// 4. Rotar al siguiente dígito
	current_digit = (current_digit + 1) % 4;
 126:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	83 70       	andi	r24, 0x03	; 3
 130:	90 78       	andi	r25, 0x80	; 128
 132:	99 23       	and	r25, r25
 134:	24 f4       	brge	.+8      	; 0x13e <__vector_11+0x78>
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	8c 6f       	ori	r24, 0xFC	; 252
 13a:	9f 6f       	ori	r25, 0xFF	; 255
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <timer1_init>:

void timer1_init(void) {
	TCCR1A = 0;
 154:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11); // Modo CTC, prescaler 8
 158:	8a e0       	ldi	r24, 0x0A	; 10
 15a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 9999; // 16MHz/(8 * 10000) = 200Hz (5ms ciclo completo)
 15e:	8f e0       	ldi	r24, 0x0F	; 15
 160:	97 e2       	ldi	r25, 0x27	; 39
 162:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 166:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A);
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 170:	08 95       	ret

00000172 <main>:
#include <avr/interrupt.h>
#include "DISPLAY_7SEG_MUX/DISPLAY_7SEG_MUX.h"

int main(void) {
	// Inicializar display y timer
	init_display_mux();
 172:	0e 94 53 00 	call	0xa6	; 0xa6 <init_display_mux>
	timer1_init();
 176:	0e 94 aa 00 	call	0x154	; 0x154 <timer1_init>
	
	// Habilitar interrupciones globales
	sei();
 17a:	78 94       	sei
	
	// Mostrar "1234" inicialmente
	update_display(1, 2, 3, 4);
 17c:	24 e0       	ldi	r18, 0x04	; 4
 17e:	43 e0       	ldi	r20, 0x03	; 3
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 5c 00 	call	0xb8	; 0xb8 <update_display>
	
	uint8_t counter = 0;
 188:	c0 e0       	ldi	r28, 0x00	; 0
 18a:	01 c0       	rjmp	.+2      	; 0x18e <main+0x1c>
		
		// Mostrar contador (formato 00-99)
		update_display(counter/10, counter%10, 0, 0);
		
		// Resetear contador después de 99
		if(counter > 99) counter = 0;
 18c:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	83 ed       	ldi	r24, 0xD3	; 211
 192:	90 e3       	ldi	r25, 0x30	; 48
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x22>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x2c>
 19e:	00 00       	nop
	uint8_t counter = 0;
	
	while(1) {
		// Incrementar contador cada segundo
		_delay_ms(1000);
		counter++;
 1a0:	cf 5f       	subi	r28, 0xFF	; 255
		
		// Mostrar contador (formato 00-99)
		update_display(counter/10, counter%10, 0, 0);
 1a2:	8d ec       	ldi	r24, 0xCD	; 205
 1a4:	c8 9f       	mul	r28, r24
 1a6:	81 2d       	mov	r24, r1
 1a8:	11 24       	eor	r1, r1
 1aa:	86 95       	lsr	r24
 1ac:	86 95       	lsr	r24
 1ae:	86 95       	lsr	r24
 1b0:	28 2f       	mov	r18, r24
 1b2:	22 0f       	add	r18, r18
 1b4:	92 2f       	mov	r25, r18
 1b6:	99 0f       	add	r25, r25
 1b8:	99 0f       	add	r25, r25
 1ba:	92 0f       	add	r25, r18
 1bc:	6c 2f       	mov	r22, r28
 1be:	69 1b       	sub	r22, r25
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	0e 94 5c 00 	call	0xb8	; 0xb8 <update_display>
		
		// Resetear contador después de 99
		if(counter > 99) counter = 0;
 1c8:	c4 36       	cpi	r28, 0x64	; 100
 1ca:	00 f7       	brcc	.-64     	; 0x18c <main+0x1a>
 1cc:	e0 cf       	rjmp	.-64     	; 0x18e <main+0x1c>

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
