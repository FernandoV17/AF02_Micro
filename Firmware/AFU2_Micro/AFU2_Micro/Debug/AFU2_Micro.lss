
AFU2_Micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  0000058e  00000622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080012e  0080012e  00000650  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d58  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096c  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082d  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00002664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000585  00000000  00000000  000027dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000380  00000000  00000000  00002d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000030e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 33       	cpi	r26, 0x3C	; 60
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a4 01 	call	0x348	; 0x348 <main>
  9e:	0c 94 c5 02 	jmp	0x58a	; 0x58a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <buttons_init>:

#define DEBOUNCE_TIME 500

void buttons_init(void) {
	// Configurar pines como entrada
	DDRD &= ~(BUTTON1_MASK | BUTTON2_MASK);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8c 7f       	andi	r24, 0xFC	; 252
  aa:	8a b9       	out	0x0a, r24	; 10
	// Desactivar resistencias de pull-up
	PORTD &= ~(BUTTON1_MASK | BUTTON2_MASK);
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	8c 7f       	andi	r24, 0xFC	; 252
  b0:	8b b9       	out	0x0b, r24	; 11
	
	// Leer estado inicial
	actual_state = BUTTONS_READ;
  b2:	83 b1       	in	r24, 0x03	; 3
  b4:	83 70       	andi	r24, 0x03	; 3
  b6:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <actual_state>
	last_state = actual_state;
	debounced_state = actual_state;
  ba:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
  be:	08 95       	ret

000000c0 <buttons_update>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	89 e6       	ldi	r24, 0x69	; 105
  c4:	98 e1       	ldi	r25, 0x18	; 24
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <buttons_update+0x6>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <buttons_update+0x10>
  d0:	00 00       	nop

void buttons_update(void) {
	// Aplicar debounce
	_delay_ms(DEBOUNCE_TIME);
	
	last_state = actual_state;
  d2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <actual_state>
	actual_state = BUTTONS_READ;
  d6:	83 b1       	in	r24, 0x03	; 3
  d8:	83 70       	andi	r24, 0x03	; 3
  da:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <actual_state>
	* 1. ~BUTTONX_MASK: Invierte la máscara para limpiar (0) solo ese bit
	* 2. actual_state & BUTTONX_MASK: Captura el estado actual de ese boton
	* Combina ambos para actualizar solo el bit del boton X sin afectar los demas
	*/
	
	if ((actual_state & BUTTON1_MASK) == (last_state & BUTTON1_MASK)) {
  de:	98 27       	eor	r25, r24
  e0:	90 fd       	sbrc	r25, 0
  e2:	08 c0       	rjmp	.+16     	; 0xf4 <buttons_update+0x34>
		debounced_state = (debounced_state & ~BUTTON1_MASK) | (actual_state & BUTTON1_MASK);
  e4:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__data_end>
  e8:	2e 7f       	andi	r18, 0xFE	; 254
  ea:	38 2f       	mov	r19, r24
  ec:	31 70       	andi	r19, 0x01	; 1
  ee:	23 2b       	or	r18, r19
  f0:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <__data_end>
	}
	
	if ((actual_state & BUTTON2_MASK) == (last_state & BUTTON2_MASK)) {
  f4:	91 fd       	sbrc	r25, 1
  f6:	07 c0       	rjmp	.+14     	; 0x106 <buttons_update+0x46>
		debounced_state = (debounced_state & ~BUTTON2_MASK) | (actual_state & BUTTON2_MASK);
  f8:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <__data_end>
  fc:	9d 7f       	andi	r25, 0xFD	; 253
  fe:	82 70       	andi	r24, 0x02	; 2
 100:	89 2b       	or	r24, r25
 102:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 106:	08 95       	ret

00000108 <button1_pressed>:
	}
}

uint8_t button1_pressed(void) {
	return !(debounced_state & BUTTON1_MASK);
 108:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <__data_end>
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	89 27       	eor	r24, r25
}
 110:	81 70       	andi	r24, 0x01	; 1
 112:	08 95       	ret

00000114 <button2_pressed>:

uint8_t button2_pressed(void) {
	return !(debounced_state & BUTTON2_MASK);
 114:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 118:	86 95       	lsr	r24
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	89 27       	eor	r24, r25
 11e:	81 70       	andi	r24, 0x01	; 1
 120:	08 95       	ret

00000122 <init_display_mux>:

volatile uint8_t display_buffer[4] = {0};
volatile uint8_t current_digit = 0;

void init_display_mux(void) {
	display_7SEG_DDRX = 0xFF;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	8a b9       	out	0x0a, r24	; 10
	display_mux_DDRX |= (1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4);
 126:	87 b1       	in	r24, 0x07	; 7
 128:	8e 61       	ori	r24, 0x1E	; 30
 12a:	87 b9       	out	0x07, r24	; 7
	display_mux_PORTX &= ~((1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4));
 12c:	88 b1       	in	r24, 0x08	; 8
 12e:	81 7e       	andi	r24, 0xE1	; 225
 130:	88 b9       	out	0x08, r24	; 8
 132:	08 95       	ret

00000134 <update_display>:
}

void update_display(uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4) {
	display_mux_PORTX &= ~((1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4));
 134:	98 b1       	in	r25, 0x08	; 8
 136:	91 7e       	andi	r25, 0xE1	; 225
 138:	98 b9       	out	0x08, r25	; 8
	display_7SEG_PORTX = 0x00;
 13a:	1b b8       	out	0x0b, r1	; 11
 13c:	ef e3       	ldi	r30, 0x3F	; 63
 13e:	ff e1       	ldi	r31, 0x1F	; 31
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <update_display+0xc>
 144:	00 c0       	rjmp	.+0      	; 0x146 <update_display+0x12>
 146:	00 00       	nop
	_delay_ms(2);
	display_buffer[0] = d1;
 148:	e1 e3       	ldi	r30, 0x31	; 49
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	80 83       	st	Z, r24
	display_buffer[1] = d2;
 14e:	61 83       	std	Z+1, r22	; 0x01
	display_buffer[2] = d3;
 150:	42 83       	std	Z+2, r20	; 0x02
	display_buffer[3] = d4;
 152:	23 83       	std	Z+3, r18	; 0x03
 154:	08 95       	ret

00000156 <__vector_11>:
}


ISR(TIMER1_COMPA_vect) {
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	// 1. Apagar todos los dígitos (poner en LOW los pines del mux)
	display_mux_PORTX &= ~((1 << DIG1) | (1 << DIG2) | (1 << DIG3) | (1 << DIG4));
 168:	88 b1       	in	r24, 0x08	; 8
 16a:	81 7e       	andi	r24, 0xE1	; 225
 16c:	88 b9       	out	0x08, r24	; 8
	
	// 2. Preparar segmentos para el dígito actual
	display_7SEG_PORTX = segment_map[display_buffer[current_digit]];
 16e:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <current_digit>
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	ef 5c       	subi	r30, 0xCF	; 207
 176:	fe 4f       	sbci	r31, 0xFE	; 254
 178:	e0 81       	ld	r30, Z
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ec 5d       	subi	r30, 0xDC	; 220
 17e:	fe 4f       	sbci	r31, 0xFE	; 254
 180:	80 81       	ld	r24, Z
 182:	8b b9       	out	0x0b, r24	; 11
	
	// 3. Activar solo el dígito actual (HIGH en el pin del mux correspondiente)
	switch(current_digit) {
 184:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <current_digit>
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	51 f0       	breq	.+20     	; 0x1a0 <__vector_11+0x4a>
 18c:	28 f0       	brcs	.+10     	; 0x198 <__vector_11+0x42>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	59 f0       	breq	.+22     	; 0x1a8 <__vector_11+0x52>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	69 f0       	breq	.+26     	; 0x1b0 <__vector_11+0x5a>
 196:	0f c0       	rjmp	.+30     	; 0x1b6 <__vector_11+0x60>
		case 0: display_mux_PORTX |= (1 << DIG1); break;
 198:	88 b1       	in	r24, 0x08	; 8
 19a:	82 60       	ori	r24, 0x02	; 2
 19c:	88 b9       	out	0x08, r24	; 8
 19e:	0b c0       	rjmp	.+22     	; 0x1b6 <__vector_11+0x60>
		case 1: display_mux_PORTX |= (1 << DIG2); break;
 1a0:	88 b1       	in	r24, 0x08	; 8
 1a2:	84 60       	ori	r24, 0x04	; 4
 1a4:	88 b9       	out	0x08, r24	; 8
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <__vector_11+0x60>
		case 2: display_mux_PORTX |= (1 << DIG3); break;
 1a8:	88 b1       	in	r24, 0x08	; 8
 1aa:	88 60       	ori	r24, 0x08	; 8
 1ac:	88 b9       	out	0x08, r24	; 8
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <__vector_11+0x60>
		case 3: display_mux_PORTX |= (1 << DIG4); break;
 1b0:	88 b1       	in	r24, 0x08	; 8
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	88 b9       	out	0x08, r24	; 8
	}
	
	// 4. Rotar al siguiente dígito
	current_digit = (current_digit + 1) % 4;
 1b6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <current_digit>
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	83 70       	andi	r24, 0x03	; 3
 1c0:	90 78       	andi	r25, 0x80	; 128
 1c2:	99 23       	and	r25, r25
 1c4:	24 f4       	brge	.+8      	; 0x1ce <__vector_11+0x78>
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	8c 6f       	ori	r24, 0xFC	; 252
 1ca:	9f 6f       	ori	r25, 0xFF	; 255
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <current_digit>
}
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <timer1_init>:

void timer1_init(void) {
	TCCR1A = 0;
 1e4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11); // Modo CTC, prescaler 8
 1e8:	8a e0       	ldi	r24, 0x0A	; 10
 1ea:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 9999; // 16MHz/(8 * 10000) = 200Hz (5ms ciclo completo)
 1ee:	8f e0       	ldi	r24, 0x0F	; 15
 1f0:	97 e2       	ldi	r25, 0x27	; 39
 1f2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A);
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 200:	08 95       	ret

00000202 <timer0_init_1ms>:
enum TimerState { CONFIG = 0, RUNNING, BUZZ } state;
uint8_t tone_played = 0;

// Timer0 @1ms CTC
void timer0_init_1ms(void) {
	TCCR0A = (1 << WGM01);
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	84 bd       	out	0x24, r24	; 36
	OCR0A  = 249;  // (16MHz / 64 / 1000) - 1
 206:	99 ef       	ldi	r25, 0xF9	; 249
 208:	97 bd       	out	0x27, r25	; 39
	TCCR0B = (1 << CS01) | (1 << CS00);
 20a:	93 e0       	ldi	r25, 0x03	; 3
 20c:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1 << OCIE0A);
 20e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 212:	08 95       	ret

00000214 <__vector_14>:
}

ISR(TIMER0_COMPA_vect) {
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	2f 93       	push	r18
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
	ms_count++;
 224:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ms_count>
 228:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <ms_count+0x1>
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <ms_count+0x1>
 232:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <ms_count>
	if (ms_count >= 1000) {
 236:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ms_count>
 23a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <ms_count+0x1>
 23e:	88 3e       	cpi	r24, 0xE8	; 232
 240:	93 40       	sbci	r25, 0x03	; 3
 242:	38 f0       	brcs	.+14     	; 0x252 <__vector_14+0x3e>
		ms_count = 0;
 244:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <ms_count+0x1>
 248:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <ms_count>
		second_flag = 1;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <second_flag>
	}
}
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <play_tone>:

// Reproduce un tono usando _delay_loop_2
void play_tone(uint16_t freq, uint16_t duration_ms) {
 262:	cf 92       	push	r12
 264:	df 92       	push	r13
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	8b 01       	movw	r16, r22
	// Número de ciclos de CPU para medio periodo
	uint32_t half_cycles = (F_CPU / (2UL * freq));
 274:	6c 01       	movw	r12, r24
 276:	e1 2c       	mov	r14, r1
 278:	f1 2c       	mov	r15, r1
 27a:	a7 01       	movw	r20, r14
 27c:	96 01       	movw	r18, r12
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	44 1f       	adc	r20, r20
 284:	55 1f       	adc	r21, r21
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	74 e2       	ldi	r23, 0x24	; 36
 28a:	84 ef       	ldi	r24, 0xF4	; 244
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 75 02 	call	0x4ea	; 0x4ea <__udivmodsi4>
	// _delay_loop_2 tarda 4 ciclos por iteración
	uint16_t iter = half_cycles / 4;
 292:	da 01       	movw	r26, r20
 294:	c9 01       	movw	r24, r18
 296:	b6 95       	lsr	r27
 298:	a7 95       	ror	r26
 29a:	97 95       	ror	r25
 29c:	87 95       	ror	r24
 29e:	b6 95       	lsr	r27
 2a0:	a7 95       	ror	r26
 2a2:	97 95       	ror	r25
 2a4:	87 95       	ror	r24
 2a6:	ec 01       	movw	r28, r24
	// Número total de pulsos
	uint32_t pulses = ((uint32_t)freq * duration_ms) / 1000;
 2a8:	d8 01       	movw	r26, r16
 2aa:	a7 01       	movw	r20, r14
 2ac:	96 01       	movw	r18, r12
 2ae:	0e 94 97 02 	call	0x52e	; 0x52e <__muluhisi3>
 2b2:	28 ee       	ldi	r18, 0xE8	; 232
 2b4:	33 e0       	ldi	r19, 0x03	; 3
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	0e 94 75 02 	call	0x4ea	; 0x4ea <__udivmodsi4>
 2be:	89 01       	movw	r16, r18
 2c0:	9a 01       	movw	r18, r20
	for (uint32_t i = 0; i < pulses; i++) {
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	ba 01       	movw	r22, r20
 2c8:	10 c0       	rjmp	.+32     	; 0x2ea <play_tone+0x88>
		PORTC |=  (1 << PC0);
 2ca:	88 b1       	in	r24, 0x08	; 8
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	88 b9       	out	0x08, r24	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2d0:	ce 01       	movw	r24, r28
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <play_tone+0x70>
		_delay_loop_2(iter);
		PORTC &= ~(1 << PC0);
 2d6:	88 b1       	in	r24, 0x08	; 8
 2d8:	8e 7f       	andi	r24, 0xFE	; 254
 2da:	88 b9       	out	0x08, r24	; 8
 2dc:	ce 01       	movw	r24, r28
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <play_tone+0x7c>
	uint32_t half_cycles = (F_CPU / (2UL * freq));
	// _delay_loop_2 tarda 4 ciclos por iteración
	uint16_t iter = half_cycles / 4;
	// Número total de pulsos
	uint32_t pulses = ((uint32_t)freq * duration_ms) / 1000;
	for (uint32_t i = 0; i < pulses; i++) {
 2e2:	4f 5f       	subi	r20, 0xFF	; 255
 2e4:	5f 4f       	sbci	r21, 0xFF	; 255
 2e6:	6f 4f       	sbci	r22, 0xFF	; 255
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	40 17       	cp	r20, r16
 2ec:	51 07       	cpc	r21, r17
 2ee:	62 07       	cpc	r22, r18
 2f0:	73 07       	cpc	r23, r19
 2f2:	58 f3       	brcs	.-42     	; 0x2ca <play_tone+0x68>
		PORTC |=  (1 << PC0);
		_delay_loop_2(iter);
		PORTC &= ~(1 << PC0);
		_delay_loop_2(iter);
	}
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	ff 90       	pop	r15
 2fe:	ef 90       	pop	r14
 300:	df 90       	pop	r13
 302:	cf 90       	pop	r12
 304:	08 95       	ret

00000306 <play_melody>:

// Reproduce la melodía completa
void play_melody(void) {
 306:	cf 93       	push	r28
	for (uint8_t i = 0; i < MELODY_LEN; i++) {
 308:	c0 e0       	ldi	r28, 0x00	; 0
 30a:	1a c0       	rjmp	.+52     	; 0x340 <play_melody+0x3a>
		play_tone(melody[i], note_durations[i]);
 30c:	8c 2f       	mov	r24, r28
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	fc 01       	movw	r30, r24
 316:	e0 50       	subi	r30, 0x00	; 0
 318:	ff 4f       	sbci	r31, 0xFF	; 255
 31a:	60 81       	ld	r22, Z
 31c:	71 81       	ldd	r23, Z+1	; 0x01
 31e:	fc 01       	movw	r30, r24
 320:	ee 5e       	subi	r30, 0xEE	; 238
 322:	fe 4f       	sbci	r31, 0xFE	; 254
 324:	80 81       	ld	r24, Z
 326:	91 81       	ldd	r25, Z+1	; 0x01
 328:	0e 94 31 01 	call	0x262	; 0x262 <play_tone>
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	80 e7       	ldi	r24, 0x70	; 112
 330:	92 e0       	ldi	r25, 0x02	; 2
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <play_melody+0x2c>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <play_melody+0x36>
 33c:	00 00       	nop
	}
}

// Reproduce la melodía completa
void play_melody(void) {
	for (uint8_t i = 0; i < MELODY_LEN; i++) {
 33e:	cf 5f       	subi	r28, 0xFF	; 255
 340:	c9 30       	cpi	r28, 0x09	; 9
 342:	20 f3       	brcs	.-56     	; 0x30c <play_melody+0x6>
		play_tone(melody[i], note_durations[i]);
		_delay_ms(50);
	}
}
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <main>:

int main(void) {
	// Configurar buzzer
	DDRC |= (1 << PC0);
 348:	87 b1       	in	r24, 0x07	; 7
 34a:	81 60       	ori	r24, 0x01	; 1
 34c:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << PC0);
 34e:	88 b1       	in	r24, 0x08	; 8
 350:	8e 7f       	andi	r24, 0xFE	; 254
 352:	88 b9       	out	0x08, r24	; 8

	cli();
 354:	f8 94       	cli
	init_display_mux();
 356:	0e 94 91 00 	call	0x122	; 0x122 <init_display_mux>
	timer1_init();
 35a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <timer1_init>
	buttons_init();
 35e:	0e 94 53 00 	call	0xa6	; 0xa6 <buttons_init>
	timer0_init_1ms();
 362:	0e 94 01 01 	call	0x202	; 0x202 <timer0_init_1ms>
	state = CONFIG;
 366:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <state>
	sei();
 36a:	78 94       	sei

	while (1) {
		buttons_update();
 36c:	0e 94 60 00 	call	0xc0	; 0xc0 <buttons_update>
		switch (state) {
 370:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <state>
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	99 f1       	breq	.+102    	; 0x3de <main+0x96>
 378:	20 f0       	brcs	.+8      	; 0x382 <main+0x3a>
 37a:	82 30       	cpi	r24, 0x02	; 2
 37c:	09 f4       	brne	.+2      	; 0x380 <main+0x38>
 37e:	54 c0       	rjmp	.+168    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 380:	70 c0       	rjmp	.+224    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
			case CONFIG:
			if (button1_pressed() && button2_pressed()) {
 382:	0e 94 84 00 	call	0x108	; 0x108 <button1_pressed>
 386:	88 23       	and	r24, r24
 388:	51 f0       	breq	.+20     	; 0x39e <main+0x56>
 38a:	0e 94 8a 00 	call	0x114	; 0x114 <button2_pressed>
 38e:	88 23       	and	r24, r24
 390:	31 f0       	breq	.+12     	; 0x39e <main+0x56>
				state = RUNNING;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <state>
				second_flag = 0;
 398:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <second_flag>
 39c:	1d c0       	rjmp	.+58     	; 0x3d8 <main+0x90>
				} else if (button1_pressed()) {
 39e:	0e 94 84 00 	call	0x108	; 0x108 <button1_pressed>
 3a2:	88 23       	and	r24, r24
 3a4:	59 f0       	breq	.+22     	; 0x3bc <main+0x74>
				seconds = (seconds + 1) % 60;
 3a6:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <seconds>
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	6c e3       	ldi	r22, 0x3C	; 60
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__divmodhi4>
 3b6:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <seconds>
 3ba:	0e c0       	rjmp	.+28     	; 0x3d8 <main+0x90>
				} else if (button2_pressed()) {
 3bc:	0e 94 8a 00 	call	0x114	; 0x114 <button2_pressed>
 3c0:	88 23       	and	r24, r24
 3c2:	51 f0       	breq	.+20     	; 0x3d8 <main+0x90>
				minutes = (minutes + 1) % 60;
 3c4:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <minutes>
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	6c e3       	ldi	r22, 0x3C	; 60
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__divmodhi4>
 3d4:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <minutes>
			}
			tone_played = 0;
 3d8:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <tone_played>
			break;
 3dc:	42 c0       	rjmp	.+132    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>

			case RUNNING:
			if (second_flag) {
 3de:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <second_flag>
 3e2:	88 23       	and	r24, r24
 3e4:	f1 f1       	breq	.+124    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
				second_flag = 0;
 3e6:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <second_flag>
				if (minutes == 0 && seconds == 0) {
 3ea:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <minutes>
 3ee:	81 11       	cpse	r24, r1
 3f0:	08 c0       	rjmp	.+16     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <seconds>
 3f6:	81 11       	cpse	r24, r1
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
					state = BUZZ;
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <state>
 400:	30 c0       	rjmp	.+96     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
					} else {
					if (seconds > 0) seconds--;
 402:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <seconds>
 406:	88 23       	and	r24, r24
 408:	31 f0       	breq	.+12     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 40a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <seconds>
 40e:	81 50       	subi	r24, 0x01	; 1
 410:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <seconds>
 414:	26 c0       	rjmp	.+76     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
					else { seconds = 59; minutes--; }
 416:	8b e3       	ldi	r24, 0x3B	; 59
 418:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <seconds>
 41c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <minutes>
 420:	81 50       	subi	r24, 0x01	; 1
 422:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <minutes>
 426:	1d c0       	rjmp	.+58     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
				}
			}
			break;

			case BUZZ:
			if (!tone_played) {
 428:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <tone_played>
 42c:	81 11       	cpse	r24, r1
 42e:	08 c0       	rjmp	.+16     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
				play_melody();
 430:	0e 94 83 01 	call	0x306	; 0x306 <play_melody>
				tone_played = 1;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <tone_played>
				PORTC |= (1 << PC0);
 43a:	88 b1       	in	r24, 0x08	; 8
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	88 b9       	out	0x08, r24	; 8
			}
			if (button1_pressed() || button2_pressed()) {
 440:	0e 94 84 00 	call	0x108	; 0x108 <button1_pressed>
 444:	81 11       	cpse	r24, r1
 446:	04 c0       	rjmp	.+8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 448:	0e 94 8a 00 	call	0x114	; 0x114 <button2_pressed>
 44c:	88 23       	and	r24, r24
 44e:	49 f0       	breq	.+18     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
				PORTC &= ~(1 << PC0);
 450:	88 b1       	in	r24, 0x08	; 8
 452:	8e 7f       	andi	r24, 0xFE	; 254
 454:	88 b9       	out	0x08, r24	; 8
				minutes = seconds = 0;
 456:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <seconds>
 45a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <minutes>
				state = CONFIG;
 45e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <state>
			}
			break;
		}
		// Actualiza display MM:SS
		update_display(minutes / 10,
 462:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <seconds>
 466:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <seconds>
 46a:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <minutes>
 46e:	30 91 3a 01 	lds	r19, 0x013A	; 0x80013a <minutes>
 472:	8d ec       	ldi	r24, 0xCD	; 205
 474:	28 9f       	mul	r18, r24
 476:	91 2d       	mov	r25, r1
 478:	11 24       	eor	r1, r1
 47a:	96 95       	lsr	r25
 47c:	96 95       	lsr	r25
 47e:	96 95       	lsr	r25
 480:	99 0f       	add	r25, r25
 482:	59 2f       	mov	r21, r25
 484:	55 0f       	add	r21, r21
 486:	55 0f       	add	r21, r21
 488:	95 0f       	add	r25, r21
 48a:	29 1b       	sub	r18, r25
 48c:	48 9f       	mul	r20, r24
 48e:	41 2d       	mov	r20, r1
 490:	11 24       	eor	r1, r1
 492:	46 95       	lsr	r20
 494:	46 95       	lsr	r20
 496:	46 95       	lsr	r20
 498:	68 9f       	mul	r22, r24
 49a:	91 2d       	mov	r25, r1
 49c:	11 24       	eor	r1, r1
 49e:	96 95       	lsr	r25
 4a0:	96 95       	lsr	r25
 4a2:	96 95       	lsr	r25
 4a4:	99 0f       	add	r25, r25
 4a6:	59 2f       	mov	r21, r25
 4a8:	55 0f       	add	r21, r21
 4aa:	55 0f       	add	r21, r21
 4ac:	95 0f       	add	r25, r21
 4ae:	69 1b       	sub	r22, r25
 4b0:	38 9f       	mul	r19, r24
 4b2:	81 2d       	mov	r24, r1
 4b4:	11 24       	eor	r1, r1
 4b6:	86 95       	lsr	r24
 4b8:	86 95       	lsr	r24
 4ba:	86 95       	lsr	r24
 4bc:	0e 94 9a 00 	call	0x134	; 0x134 <update_display>
					   minutes % 10, 
					   seconds / 10, 
					   seconds % 10);
	}
 4c0:	55 cf       	rjmp	.-342    	; 0x36c <main+0x24>

000004c2 <__divmodhi4>:
 4c2:	97 fb       	bst	r25, 7
 4c4:	07 2e       	mov	r0, r23
 4c6:	16 f4       	brtc	.+4      	; 0x4cc <__divmodhi4+0xa>
 4c8:	00 94       	com	r0
 4ca:	07 d0       	rcall	.+14     	; 0x4da <__divmodhi4_neg1>
 4cc:	77 fd       	sbrc	r23, 7
 4ce:	09 d0       	rcall	.+18     	; 0x4e2 <__divmodhi4_neg2>
 4d0:	0e 94 a2 02 	call	0x544	; 0x544 <__udivmodhi4>
 4d4:	07 fc       	sbrc	r0, 7
 4d6:	05 d0       	rcall	.+10     	; 0x4e2 <__divmodhi4_neg2>
 4d8:	3e f4       	brtc	.+14     	; 0x4e8 <__divmodhi4_exit>

000004da <__divmodhi4_neg1>:
 4da:	90 95       	com	r25
 4dc:	81 95       	neg	r24
 4de:	9f 4f       	sbci	r25, 0xFF	; 255
 4e0:	08 95       	ret

000004e2 <__divmodhi4_neg2>:
 4e2:	70 95       	com	r23
 4e4:	61 95       	neg	r22
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255

000004e8 <__divmodhi4_exit>:
 4e8:	08 95       	ret

000004ea <__udivmodsi4>:
 4ea:	a1 e2       	ldi	r26, 0x21	; 33
 4ec:	1a 2e       	mov	r1, r26
 4ee:	aa 1b       	sub	r26, r26
 4f0:	bb 1b       	sub	r27, r27
 4f2:	fd 01       	movw	r30, r26
 4f4:	0d c0       	rjmp	.+26     	; 0x510 <__udivmodsi4_ep>

000004f6 <__udivmodsi4_loop>:
 4f6:	aa 1f       	adc	r26, r26
 4f8:	bb 1f       	adc	r27, r27
 4fa:	ee 1f       	adc	r30, r30
 4fc:	ff 1f       	adc	r31, r31
 4fe:	a2 17       	cp	r26, r18
 500:	b3 07       	cpc	r27, r19
 502:	e4 07       	cpc	r30, r20
 504:	f5 07       	cpc	r31, r21
 506:	20 f0       	brcs	.+8      	; 0x510 <__udivmodsi4_ep>
 508:	a2 1b       	sub	r26, r18
 50a:	b3 0b       	sbc	r27, r19
 50c:	e4 0b       	sbc	r30, r20
 50e:	f5 0b       	sbc	r31, r21

00000510 <__udivmodsi4_ep>:
 510:	66 1f       	adc	r22, r22
 512:	77 1f       	adc	r23, r23
 514:	88 1f       	adc	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	1a 94       	dec	r1
 51a:	69 f7       	brne	.-38     	; 0x4f6 <__udivmodsi4_loop>
 51c:	60 95       	com	r22
 51e:	70 95       	com	r23
 520:	80 95       	com	r24
 522:	90 95       	com	r25
 524:	9b 01       	movw	r18, r22
 526:	ac 01       	movw	r20, r24
 528:	bd 01       	movw	r22, r26
 52a:	cf 01       	movw	r24, r30
 52c:	08 95       	ret

0000052e <__muluhisi3>:
 52e:	0e 94 b6 02 	call	0x56c	; 0x56c <__umulhisi3>
 532:	a5 9f       	mul	r26, r21
 534:	90 0d       	add	r25, r0
 536:	b4 9f       	mul	r27, r20
 538:	90 0d       	add	r25, r0
 53a:	a4 9f       	mul	r26, r20
 53c:	80 0d       	add	r24, r0
 53e:	91 1d       	adc	r25, r1
 540:	11 24       	eor	r1, r1
 542:	08 95       	ret

00000544 <__udivmodhi4>:
 544:	aa 1b       	sub	r26, r26
 546:	bb 1b       	sub	r27, r27
 548:	51 e1       	ldi	r21, 0x11	; 17
 54a:	07 c0       	rjmp	.+14     	; 0x55a <__udivmodhi4_ep>

0000054c <__udivmodhi4_loop>:
 54c:	aa 1f       	adc	r26, r26
 54e:	bb 1f       	adc	r27, r27
 550:	a6 17       	cp	r26, r22
 552:	b7 07       	cpc	r27, r23
 554:	10 f0       	brcs	.+4      	; 0x55a <__udivmodhi4_ep>
 556:	a6 1b       	sub	r26, r22
 558:	b7 0b       	sbc	r27, r23

0000055a <__udivmodhi4_ep>:
 55a:	88 1f       	adc	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	5a 95       	dec	r21
 560:	a9 f7       	brne	.-22     	; 0x54c <__udivmodhi4_loop>
 562:	80 95       	com	r24
 564:	90 95       	com	r25
 566:	bc 01       	movw	r22, r24
 568:	cd 01       	movw	r24, r26
 56a:	08 95       	ret

0000056c <__umulhisi3>:
 56c:	a2 9f       	mul	r26, r18
 56e:	b0 01       	movw	r22, r0
 570:	b3 9f       	mul	r27, r19
 572:	c0 01       	movw	r24, r0
 574:	a3 9f       	mul	r26, r19
 576:	70 0d       	add	r23, r0
 578:	81 1d       	adc	r24, r1
 57a:	11 24       	eor	r1, r1
 57c:	91 1d       	adc	r25, r1
 57e:	b2 9f       	mul	r27, r18
 580:	70 0d       	add	r23, r0
 582:	81 1d       	adc	r24, r1
 584:	11 24       	eor	r1, r1
 586:	91 1d       	adc	r25, r1
 588:	08 95       	ret

0000058a <_exit>:
 58a:	f8 94       	cli

0000058c <__stop_program>:
 58c:	ff cf       	rjmp	.-2      	; 0x58c <__stop_program>
